{"meta":{"title":"Tisp","subtitle":"","description":"","author":"皮聪","url":"picong.club"},"pages":[{"title":"about","date":"2017-10-21T22:26:37.000Z","updated":"2017-10-26T09:50:45.000Z","comments":true,"path":"about/index.html","permalink":"picong.club/about/index.html","excerpt":"","text":"“力拔山兮气盖世呀!”"},{"title":"categories","date":"2017-10-29T06:09:17.000Z","updated":"2017-10-29T06:09:59.000Z","comments":false,"path":"categories/index.html","permalink":"picong.club/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-29T06:21:47.000Z","updated":"2017-10-29T11:24:20.000Z","comments":false,"path":"tags/index.html","permalink":"picong.club/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"聊一聊Purcell的Configuration","slug":"聊一聊purcell的配置","date":"2017-10-29T11:51:58.000Z","updated":"2017-10-29T13:53:38.000Z","comments":true,"path":"2017/10/29/聊一聊purcell的配置/","link":"","permalink":"picong.club/2017/10/29/聊一聊purcell的配置/","excerpt":"","text":"工欲善其事必先利器，而emacs绝对是你值得投入一些学习时间的。可能有时候在别人眼中你那么不合群，总弄些奇奇怪怪的玩意，再次说下emacs不是玩具，是神之编辑器。虽然现在你的一些炫技在别人看来是那么的蹩脚，那就暂时不要show出来，背地里练习，等到时机成熟你总能亮瞎一些嫌弃的眼光。有点扯远了，我也是因为看了看了陈斌大神的，一年成为emacs高手之后开始稳定下来不再到处找各种dotfile。因为purcell的配置确实还是比较容易上手，而且性能方面很好，你值得拥有。 新手如何配置purcell的configuration 首先你要安装emacs这个是必须条件，然后先删除~/.emacs文件，这个是emacs首次打开的时候自动生成的配置文件，我们一般会用~/.emacs.d/init.el替换它。 当然你得知道purcell的仓库地址: purcell的配置 克隆purcell的配置仓库到你本地的~/.emacs.d，然后重启等待下载一些package，当然这里下载要翻墙，如果你想下载快点可以将下载源改成emacs-china的源。 怎么改？ good question 找到.emacs.d下面的lisp文件夹下面init-elpa.el文件然后找到长得像我下面这样的一段代码，用我这段覆盖他的那一段就可以了。 12345678910111213141516171819202122232425;;; Standard package repositories;; We include the org repository for completeness, but don't normally;; use it.(add-to-list 'package-archives '(\"org\" . \"http://elpa.emacs-china.org/org/\"))(defconst sanityinc/no-ssl (and (memq system-type '(windows-nt ms-dos)) (not (gnutls-available-p))));;; Also use Melpa for most packages;;; (\"gnu\" . \"http://elpa.emacs-china.org/gnu/\");;; (\"melpa\" . \"http://elpa.emacs-china.org/melpa/\")(add-to-list 'package-archives `(\"melpa\" . ,(if sanityinc/no-ssl \"http://elpa.emacs-china.org/melpa/\" \"http://elpa.emacs-china.org/melpa/\")))(unless sanityinc/no-ssl ;; Force SSL for GNU ELPA (setcdr (assoc \"gnu\" package-archives) \"https://elpa.gnu.org/packages/\"));; NOTE: In case of MELPA problems, the official mirror URL is;; https://www.mirrorservice.org/sites/stable.melpa.org/packages/ 我开始安装这个配置的时候有个zip包和jar包很难下载下来，不过这个bug他已经修复了，所以我就不提了。这时候打开你的emacs等待包安装完毕吧。 如果不想自己写配置这么麻烦的话，其实我们完全可通过customize来实现一些自己的定制，比如： 12M-x customize-themes可以选择自己喜欢的主题，如果少了，没问题去网上找些自己喜欢的然后通过 package-list-packages来进行安装然后再勾选。M-x customize 可以定制我们对任意提供了customize接口的mode的需求。 不满足你的需求？那就只能自己写配置了，其实自己写配置的话先照着他那些已经定义好的init-xxx.el那种格式去写，当然要会点elisp。 如何进行自己的扩展 首先我们需要在lisp文件夹里面创建一个init-local.el的文件，当然这种修改的话purcell是建议你先fork他的代码然后再改，当然这是基本的嘛，不然怎么用git来管理我们的配置对吧。 自己的配置主要时写在上面创建的文件里，当然他也提供了一个init-preload-local.el的钩子，就是这个preload是提前加载的意思。 我们来看一段我写在local里面的一些配置吧。 1234567891011121314151617181920212223 ;; (require-package 'use-package)(require-package 'youdao-dictionary);;快捷键的绑定(global-set-key (kbd \"C-s\") 'sanityinc/swiper-at-point)(global-set-key (kbd \"C-c y\") 'youdao-dictionary-search-at-point+)(global-set-key (kbd \"M-&lt;left&gt;\") 'backward-word)(global-set-key (kbd \"M-&lt;right&gt;\") 'forward-word);; vue-mode的一些初始配置 (require-package 'vue-mode)(after-load 'vue-mode (setq mmm-submode-decoration-level 0));; (use-package vue-mode)(require-package 'hlinum)(hlinum-activate);; org-mode 的bullets主题(require-package 'org-bullets);; (use-package org-bullets)(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))(provide 'init-local) 这段配置主要就是绑定了四个快捷键，初始化了一下vue-mode的一些初始配置然后就是添加了一个org的bullets主题。这里最值得注意的是最后一句(provide ‘init-local) 这个是文件的简写名，也就是不要带后缀。 如果配置一些其他的便捷的模块，按照这个模式写就可以了。 最后放出我自己的是个神马样子吧","categories":[{"name":"emacs","slug":"emacs","permalink":"picong.club/categories/emacs/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"picong.club/tags/emacs/"},{"name":"elisp","slug":"elisp","permalink":"picong.club/tags/elisp/"}]},{"title":"springboot整合kafka","slug":"2017-05-31-springboot-kafka","date":"2017-10-26T09:50:45.000Z","updated":"2017-10-29T06:09:33.000Z","comments":true,"path":"2017/10/26/2017-05-31-springboot-kafka/","link":"","permalink":"picong.club/2017/10/26/2017-05-31-springboot-kafka/","excerpt":"","text":"kafka百科:Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消费。 mac 使用brew安装kafka12cd /usr/localbrew install kafka 因为kafka是依赖zookeeper的,所以使用brew安装kafka的同时会帮我们自动安装zookeeper. 下面是我们使用命令分别开启zookeeper和kafka,然后运行kafka程序里面的bash脚本来启动一个生产者和一个消费者. 由于我们使用brew安装的kafka,所以省去了配置环境变量这一步了. 1234567891011zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties &amp;#启动zookeeper命令,kafka依赖zookeeperkafka-server-start /usr/local/etc/kafka/server.properties &amp;#启动kafka命令kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test#创建一个topic名为”test”kafka-topics --list --zookeeper localhost:2181#查看已经创建的topics列表kafka-console-producer.sh --broker-list localhost:9092 --topic test kafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning #上面两个命令分别开启生产者和消费者,当我们在消费者终端输入消息,生产者当中就会进行消费 springboot整合kafkapom添加依赖:123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt; &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt; &lt;/dependency&gt; 配置文件:12345678910spring:kafka: bootstrap-servers: localhost:9092 consumer: group-id: myGroup key-deserializer: org.apache.kafka.common.serialization.StringDeserializer value-deserializer: org.apache.kafka.common.serialization.StringDeserializer producer: key-serializer: org.apache.kafka.common.serialization.StringSerializer value-serializer: org.apache.kafka.common.serialization.StringSerializer 生产者:1234567891011121314@Componentpublic class Sender &#123; @Autowired private KafkaTemplate kafkaTemplate; private Gson gson = new GsonBuilder().create(); public void senMessage()&#123; Message m = new Message(); m.setId(System.currentTimeMillis()); m.setMsg(UUID.randomUUID().toString()); m.setSendTime(new Date()); kafkaTemplate.send(\"test\",gson.toJson(m)); &#125;&#125; 消费者:12345678910111213@Componentpublic class Receiver &#123; private final static Logger logger = LoggerFactory.getLogger(Receiver.class); private Gson gson = new GsonBuilder().create(); @KafkaListener(topics = \"test\") public void processMessage(String content)&#123; Message m = gson.fromJson(content,Message.class); logger.info(\"消息发送者发送的信息 m=&#123;&#125;\",m); &#125;&#125; springboot 启动入口:12345678910111213@SpringBootApplicationpublic class KafkaApplication &#123; public static void main(String[] args) throws InterruptedException &#123; ApplicationContext app = SpringApplication.run(KafkaApplication.class, args); while(true)&#123; Sender sender = app.getBean(Sender.class); sender.senMessage(); Thread.sleep(500); &#125; &#125;&#125; 参考文档及源代码修改过后的🌰github原来的🌰csdn","categories":[{"name":"springboot","slug":"springboot","permalink":"picong.club/categories/springboot/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"picong.club/tags/springboot/"},{"name":"kafka","slug":"kafka","permalink":"picong.club/tags/kafka/"}]}]}